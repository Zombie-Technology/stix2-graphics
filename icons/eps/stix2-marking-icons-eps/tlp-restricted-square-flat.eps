%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 120.959996 120.959996
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.14.3 (Build 18D109) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 121 121
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 121 121
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: HelveticaNeue
%!FontType1-1.0: HelveticaNeue 1.0000.1.0000
14 dict begin/FontName /HelveticaNeue def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /b put
dup 34 /r put
dup 35 /e put
dup 36 /t put
dup 37 /space put
dup 38 /j put
dup 39 /o put
dup 40 /d put
dup 41 /a put
dup 42 /n put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[1000 -951 1 index div -481 2 index div 1987 3 index div 1077 5 -1 roll div]cvx def
/sfnts [<




00>] def
/CharStrings 12 dict dup begin
/.notdef 0 def
/space 1 def
/a 2 def
/b 3 def
/d 4 def
/e 5 def
/j 6 def
/n 7 def
/o 8 def
/r 9 def
/t 10 def
/uni2B91 11 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] def
/FontBBox{-951 -481 1987 1077}def
/UniqueID 4151493 def
currentdict currentfile eexec

6DDBFD643819B7E91A0E0B4DC00F0AE7C8F2EE12D0CE555EF319B9CFF33D9EE41EEDBB07A6AAB57DAB57CD1FD8A7B2A64EFA87DFD0F2C246322D661370BA5356CE2CE8BF42C3D1229AB58782D4915A30EA83D098551592360A3838A2CA4C7CB845158A9E74371DA0729F8FD546298BA39BD6526C13CA12A33BF0E562E7AA92ACF8CA64B059560ECBD7009F907F0D96F9E11018D365571B19274EAC2ECE70DC89275100DED4F710A2666B726B8147C84E621870426A3DEB395754FBE19636B0BCD3537F4BA24B23A3F506C91C78FCCFA8CB73745FC132CD40C8CF72506D4F953891D53E4D2473C00BF4380550F335E9564298F9D2237D4DACF3D26F89C0D65DDE9031D8863DE01AC0453D0C330D6BD7A433FCC4F7EA2096652710F83F2868E10F855F07152A2DFA3337D98C0781660A4EF5B8AFE0A9ED825E686B3E65D2AB0861E2C735B53A93F70F21C74DB9D289159C37933A99E5D3F5F1C54B6B4B6813BEDF6943983CE62F0A1D117EFC581FFCC47351147EAEF65C9AD3917A7B002DDD2E42A575F472DFB2F170B4099E167FC9DB88BF2FD7D36D42C2E02377BB2607AD2CA3D325B9603C4C348F9BF26FA8B1BB67061C8AC184B721E3D0558E496A98A31D230EF96E5CC1DB8E354F9F6F283678DEEC185FC40C6F38A2B22429E327707470CB0601D5BE681374E9740E7EEB112EA89B0AC0E3B51D6C964C637DA824186BA4EEB30ECDE66777EEB4D3E958D05323B8AA6ADC8EFEAB9036F5810E1110677475B45C45708E77209812B2225A956A30C7CBF2206F9C4261F0710E3621B6C8A2CD8171F054A5B03BC9CFC504457C6208B84EF8D751D0E561C2B9EA2C37C7205E507620C85D1D4704AF913A86849C71AA9D57C6F28F42D1527118FEFCC970807B136BCF6C15196AB1A7A6D144494672871FA5846124386C2737A7778099B2A1E0E974041EB7698D28DADE48D9ADAD431810016C0540AFCFD1AA06B20D86459658BECCC1EFD08A80DB4E64B563471FE568C01BE5EAC20594378F61EEF3D3FFFB30AC85EC78E87216BBE9DB823E9BB064A026809001C8A730EA2B2D24C13A1706BE63BD38D131A0E811471F7E01B52721EBDC6AEB261C3CE12DC339A623368F85CB19FAB9415FBCAF8E68C32EADB8A5E2B82A620A138F2F58ECDC44B9CF889D209D7B6526EA34832440459F3832E11CAA167031CC0FBF8EBB5A01A88DB12B203E6559ADB2DEA970F21FE4CC1A011384CD4991CE3B6BED24D609265F1D34708748167CFE2028D7266F55C3428753E4A8A9684E8217F4AF247F7EAA32DC3A11E3A91F2CCE786AE1BD851E19045349954E226B67E029A6A755E7BFEB86E3F63A4DF74D895AC295B44D8EBDB3695CDEB6F9563D1DFC3C53FF0FB23F651D9E6C13216FD468237692802EF908982CCA4C2C449341229E1733C7F80C0744775C378D957797CA62
C90615FD67ADF8DC02D4BBD6CDBC8B703BE302F81CA05704F28932CD738342D893964E8E6BC01F51F4DE0CA33EFA8AEFA54E7541E9E2161359C74D173360EBEF899E0AF21654F861ACEABD7E7A2F84862E0E4592544F3E1D74A98A52693BCA92013C14B79332A5934C90021A77E8C2983B83D4D213B676AC591AFA5007D085F5F0C4081B8CC7A64E3732668704F54DC7C6C84F7C18B325FB4BB3255436D618C5783C261037FDB512872A82E3A43650B2325CF9DB374710D6F8BD86FBD832DA3BE94F9652B32DBA9AC0FEE2F383E74822CAD8D68FE7C51DDF751455D189FF90365D67E6969C1A46E13E6CB119855CF35C9E0C44EB0F68737B8F77AA3CA8E8E0CB921710337D99F3E3EF3C422D2041780818443ADDAB2B3FEFDAFD77FE88FDDA2A585E8B8484A7C01C0EADDFC69C6C027EEF7EE080762B18C85543FFE5E90E226086B6A19BD416BA4E1D2E2E01073730D6816908498114CCCFB881A615FA42F29A0B92AD1E15E460F60022CAC1639DB0EB70CF049BFF2D86483AB24CF540DE986BE69372E572AA37FFB9A0FDD763ACD699110D01042D079B80119BA93939266A5B31F92A653E8418C9F4F2FF02FE72ECF8EDC9BFF93F019AE44E58723699E039EE8F63F5FB88AB14160A5A9F1CB010876B5ED90421327C4F904A2E588E7015C98640D3216B1E4EC27C6137C9D291E2F5CDA53F682FE6684EC7B7887B274A3B97B1DB8E4537E76E085B591A188B7C4B45BD3DF715E4AF90493958C4104BD9442C30CA
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/HelveticaNeue cguidfix
/F1.1/HelveticaNeue renmfont
%RBIBeginFontSubset: Copperplate-Bold
%!FontType1-1.0: Copperplate-Bold 1.0000.1.0000
14 dict begin/FontName /Copperplate-Bold def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /R put
dup 34 /E put
dup 35 /S put
dup 36 /T put
dup 37 /I put
dup 38 /C put
dup 39 /D put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[1000 -581 1 index div -288 2 index div 1743 3 index div 928 5 -1 roll div]cvx def
/sfnts [<



00>] def
/CharStrings 9 dict dup begin
/.notdef 0 def
/C 1 def
/D 2 def
/E 3 def
/I 4 def
/R 5 def
/S 6 def
/T 7 def
/u1FFE 8 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] def
/FontBBox{-581 -288 1743 928}def
/UniqueID 4390346 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C5586B741EEB93F3C73016EC16BFF283758900903D203992EFC8BAFAF13579C602F38C99D7B912F94734180BCB0A2B426ACDB993C61FD2485EFF51D552B7983EECF235595D121D98187323D686D915B94C68A1DC81F5D349D8FCE9D3A6D03C4CC243E9DC960E5C208F9B51D92D9848C2070B63A253C526663CFD29CFE986684E0BAAFDB1E5877FBCD4A90EC7C4A8F146A87E150219F4B8EEE33CD716953C76930ED9795696D6832ECD90026CEC8C177648F702C0FD9C38A50DA2CFCE0C7A91A6020C5EED41B11944CDFE4552DE4787F9C041F7B8A3EA2B8D86792490A2E546B92D49BE35FD0261F6AC94D3E5A00BF3F10024C744EA70CAE6B1CA2D7844E3BCE2087D282A1C184FD53E30D71A5F38607F1E468BBE82EBFFB623B6445F887BB3B1A38D64950987B87EA549117D01237CC42A9583BA5494991AEBD59D95A6CBC15401A03FF4FE4E222C628A9B91E1DCB8835C871BE2443E0C60F1D1B635A933841674676932273BAC18F138B8F70B1F6A46E7A8ABB0122E0AD0641D836C43FE5483475AD1CEFD2F28E0955A462E1CC1F6A618B1F721CF2C3FB487AD0EC653CE0EEAA3F24C58EFA4B82904CDEB1592D6FC9967E6443BA7F9A209E8250452950ED7EAC69AF88A47661224F65F341915A9B579D5721A9BAAF6DEC38A6A7B45BEDCA723FA18A919656096971D920027091B4EDAE4E943D8527579CF1BF8D1729EAD704F26F2928864DFF9173932C2F3AD435E236D6157180DA58B7FBEAB25C6D07336B54DED2CD7A15878E13009916CF528E59CEEAAAE6D37876E4E686E947DC28B8999C3EE9908
0FDE839C363527A8B545459A8F2A83FB39B0DC9C0D0A49B7D512D83D2C2902804DBB561C3EB4CD135EE353ACE65CEF19605106AD0868F958F8CB27875A1ECA5137B591C8C1BFF6DBAD6FDC14FA4CF2AD6DBD374DD6D276DA03A2D482307485F41350C79B23E4D2540AE23AF387A706F7D3A867CAA38BEC9C2D078505D294FBA11D0E815FBE109FFD7D1C49E7D4F8B426FFEEFD46F8D0390A5A2D422CDD0B45F60F365DF5E1C0BDF1DE299B960192A5B88DC4DB3CF86741F493D01D77EFB0BCC208F82272B493E58167E22824D3E3B6F620066CB69C43CB110BF0A2F123497DEE4A12F271DDED55B9CC49D98596B647CDED4FCF3A37D98C4E2745B4A3399C770F6CC26B1FAD6DB6B704D8893733059539248319858BF6D75B476A684AF2725D59CC99A7C3F6EF7F7DEA7EEA859353A748D9BFAA7B27A75A1B90DF3E071FF5EE1F8A2BB672F4C87CBC2B6FC8D2F58886ACF9AB3E36F46AA3B8D29679D83A1ACFBB882032DCC2375F65A29E902FE036B4523BEB1A1FB99C7321C907A49AB7063D3122CBBD4DE674B96499634826EE0A88D441175A31861F18F527D0C7F30E9A43D928CC79FB9C1250D4FD24F862BCB46836649693CB7083D32702ACC06156E047AC1F3AE30E0847554EF362D754C238E3F6FDD90A7AEE5880BB77085B2D966D178E703B34D0983BD024EF6BA876A05B526E990E3182628DD8E295FE0E937EAF7AC3377A61888B0D8652683EEFC6DAB657EBE71B096D6E4BB86C982D91C083929C9AD4348E7AA2123AF92401AF5AE9CDAB4FB8AE56DAB29CD94197598AB9415670CD227A2AE250C778F548BB34792D69958CC9CFD42E3C6E66AAF2A6E395BB04759D884174A43A9BB51D4998EEEEAD4BF3EA68C15FABFA66CBEFAB337DD0E6E8190724B6100B522276887C7F87B3C974A734D9A9AAC13820B335499BD4A9E1845D305D2BE360A3FCA8F63F83AF8D5726BCDCEC5BDB37A28D85ADCDAC631B7CE38620B714A91D74BCADB9CCC8BC58E058DF93F4D643B27910D5BCB42A55FB4364C1988C0BA782D139B119C61240E8380E26C1F3264555C3150398AB32565FA9D4119F0BE30F93DF61DA4C70E00C8837184B993EB606690CD29B0CC6B218C4C5A338A22A9AF5BA461482E6FE8D80A4F737730D90711DA8D422882200D5591A486C58DD67E03DC04188438A145AA1DD81F53A6D36046C9E1034BC7EA3BD4FCF97B6AA75D49EB90A519A5E769A3A18994F1CE6D4D877E97AC86A6834B2178D54F504C0CDB2802A8393B392D32A757EAF895730587F65471453754A75E5E81C1858DFA6F1EEAF55658F26DC8BD71C032AA95F77678064BFCC26AFA8246973652A69DBAA45A0CD61AACF93C93C921FCDF965AC28CEB8CBE4603823400898458D709DB17D4B9ED0AF1C3D7D5DF0069EF600148E1CF322DAF7EB777FFD545635563CDA173600

0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/Copperplate-Bold cguidfix
/F2.1/Copperplate-Bold renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
q
0 0 120.96 120.96 rc
109 0 0 109 6 6 cm
save
981 41 cg_miaiproc 
291 -36 -33{
gsave 1 327 div 1 327 div scale 0 exch translate
currentfile 0 (EOD
)/SubFileDecode filter
L3?{flushfile}{cvx exec}ifelse
327 37 scale
BI
/Width 327
/Height 37
/BitsPerComponent 8
/Decode[
0 1
0 1
0 1
]
/DataSource ImageDataSource
/MaskedImage true
ID
EI
grestore} bind for
0 36 m 0 0 l 327 0 l 327 36 l h W n EOD
JcC<$JcC<$JcC<$JcCB&!<<,R!.k0Ks+13$s+13$s+13(s8;rQ!29Glo)@#8^](V>W;`EVSq3JaSq3Ja
Sq3L/T)PD^WrBF*_#Dj_oqDE_!8[^[s8Mcl_u>Ml=8k+2+b:ef+b:ef+b:g$+oXM$?2frbb5V7As7lZQ
!4i./p&;,n?2c4&+nd(1+b:ef+b:ef+l=IB.K3rY\,Q36s7ZNQ!5JR5gAZ3n.tJl0+b:ef+b:ef+b:fh
+oX1pJH"WEs7HBQ!6,!;e,F%[,(Uot+b:ef+b:ef+b:fd+oWeeFoL7:s766Q!6bEAmJ_;.,(Uol+b:ef
+b:ef+b:f`+oWeeLApkhs7$*Q!7(WDVuAB$+k%Tc+b:ef+b:ef+j;,/3W?P6s6fsQ!7_&Jo)<<R+j2$[
+b:ef+b:ef+iki+HiEijs6TgQ!8%8Mdf)C\+iY[V+b:ef+b:ef+ibc*9)dc#s6B[Q!8@JP^]#^6+i,=Q
+b:ef+b:ef+iY])1]GeUs60OQ!8[\SY5T_u+hStL+b:ef+b:ef+iPW(/,mHBs5sCQ!9!nVX8X;o+h&VG
+b:ef+b:ef+iGQ'-N:p@s5a7Q!9=+Y^&B=/+gN8B+b:ef+b:ef+i>K&/,mrVs5O+Q!9X=\ci,AE+fuo=
+b:ef+b:ef+i5E%1]H=ps5<tQ!9sO_n,>A!+fHQ8+b:ef+b:ef+i,?$9)eYNs5*hQ!9sO_@Y#\t+b:ef
+b:ef+b:fP+oZiQs4m\Q!:9abSq/&V+b:ef+b:ef+b:fO+o]"<s4[PQ!:Tsekl*,a+e0^,+b:ef+b:ef
+i,?$3WA^?s4IAP!:TseCOmXq+b:ef+b:ef+b:fP+o[5bs4@;Os7?9ia+5Cs+b:ef+b:ef+b:fR+oWee
hX^^!!<3#ks8H2Q+cmju+b:ef+b:ef+i,?$Fn5Rb!;ulns8L8o+c@Lp+b:ef+b:ef+i>K&-2uuus4@>J
s8;orAUu"]+b:ef+b:ef+b:fR+o[#bs4@>Hs8M?`,_7+o+b:ef+b:ef+b:fT+oX1pq=t!B!;QQpS=BSL
JK]UgJK]RfJK]RfJK_oSrjV\&fDt^Hr_!57JK]RfJK]RfJK]RfJK_uUrats*fDtgKroj5&JK]RfJK]Rf
JK]RfJK`&Wr[IjCqu>:Kqu?Z!q&t;4JK]RfJK]RfJK]Rf`Zb?(qu>:Kqu?Y<pE>)2JK]RfJK]RfJK]Rf
a<CPEqu>:Kqu?X^oc\l0JK]RfJK]RfJK]Rfas$aiqu>:Krr;uorZq(YJK]RfJK]RfJK]RfJK`5\r]0lU
fDtpNrnHiaJK]RfJK]RfJK]RfJK`2[rq69jfDtpNrjqG>JK]RfJK]RfJK]RfJK`8]rm^rIfDtpNrhes(
JK]RfJK]RfJK]RfJK`>_rkSO5fDtpNrgW*pJK]RfJK]RfJK]RfJK`DarjDb*J,
~> 0 37 m 0 0 l 327 0 l 327 37 l h W n EOD
fDtpNrgSH^YT\Q@JK]RfJK]RfM';l+rr3!!!87GPs8J(1+g)u>+b:ef+b:ef+c@NCWrE%s!8ISRs8I_'
+fli<+b:ef+b:ef+cRZET`4ug!8[_Ts8IY%+fZ]:+b:ef+b:ef+cdfGT)Scc!8mkVs8IY%+fHQ8+b:ef
+b:ef+d!rIT)Sca!9+"Xs8IY%+f6E6+b:ef+b:ef+d4)KT)Sc_!9=.Zs8IY%+f$94+b:ef+b:ef+dF5M
T)Sc]!9O:\s8IY%+eg-2+b:ef+b:ef+dXAOT)Sc[!9aF^s8IY%+eU!0+b:ef+b:ef+djMQT)ScY!9sR`
s8IY%+eBj.+b:ef+b:ef+e'YST)ScW!:0^bs8IY%+e0^,+b:ef+b:ef+e9eUT)ScU!:Bjds8IY%+dsR*
+b:ef+b:ef+eKqWT)ScS!:U!fs8IY%+daF(+b:ef+b:ef+e^(YT)ScQ!:g-hs8IY%+dO:&+b:ef+b:ef
+ep4[T)ScO!;$9js8IY%+d=.$+b:ef+b:ef+f-@]T)ScM!;6Els8IY%+d+""+b:ef+b:ef+f?L_T)ScK
!;HQns8IY%+cmju+b:ef+b:ef+fQXaT)ScI!;Z]ps8IY%+c[^s+b:ef+b:ef+fcdcT)ScG!;lirs8IY%
+cIRq+b:ef+b:ef+fupeT)ScE!<)uts8IY%+c7Fo+b:ef+b:ef+g3'gT)ScC!!!#us8IY%+c%:m+b:ef
+b:ef+gE3iT)ScB!!*$"s8W(NJK]akJK]RfJK]RfJK_?Crgs,hfDtpNre#bFKHYmiJK]RfJK]Rf[3>O@
rr:UNrr3"OK)gOT+bCkg+b:ef+b:ef+h&WoT)ScB!<3#tK)d'G+b:ef+b:ef+b:ef+h8cqT)ScB!<3#t
KDm$F+b:ef+b:ef+b:ef+hJosT)ScB!<3#tKDZmD+b:ef+b:ef+b:ef+h]&uT)ScB!<3#tKDHaB+b:ef
+b:ef+b:ef+ho3"T)ScB!<3#tKD6U@+b:ef+b:ef+b:ef+i,?$T)ScB!<3#tKD$I>+b:ef+b:ef+b:ef
+i>K&T)ScB!<3#tKCg=<+b:ef+b:ef+b:ef+iPW(T)ScB!<3#tKCU1:+b:ef+b:ef+b:ef+ibc*T)ScB
!<3#tKCC%8+b:ef+b:ef+b:ef+ito,T)ScB!<3#tKC0n6+b:ef+b:ef+b:ef+j2&.T)ScB!<3#tKBsb4
+b:ef+b:ef+b:ef+jD20T)ScB!<3#tKBaV2+b:ef+b:ef+b:ef+jV>2T)ScB!<3#tKBOJ0+b:ef+b:ef
+b:ef+jhJ4T)Sb?
~> 0 37 m 0 0 l 327 0 l 327 37 l h W n EOD
fDtpNre#bFYT\Q@JK]RfJK]RfM';kirr3!!!87GPs8IY%+g)u>+b:ef+b:ef+c@NCT)Scg!8ISRs8IY%
+fli<+b:ef+b:ef+cRZET)Sce!8[_Ts8IY%+fZ]:+b:ef+b:ef+cdfGT)Scc!8mkVs8IY%+fHQ8+b:ef
+b:ef+d!rIT)Sca!9+"Xs8IY%+f6E6+b:ef+b:ef+d4)KT)Sc_!9=.Zs8IY%+f$94+b:ef+b:ef+dF5M
T)Sc]!9O:\s8IY%+eg-2+b:ef+b:ef+dXAOT)Sc[!9aF^s8IY%+eU!0+b:ef+b:ef+djMQT)ScY!9sR`
s8IY%+eBj.+b:ef+b:ef+e'YST)ScW!:0^bs8IY%+e0^,+b:ef+b:ef+e9eUT)ScU!:Bjds8IY%+dsR*
+b:ef+b:ef+eKqWT)ScS!:U!fs8IY%+daF(+b:ef+b:ef+e^(YT)ScQ!:g-hs8IY%+dO:&+b:ef+b:ef
+ep4[T)ScO!;$9js8IY%+d=.$+b:ef+b:ef+f-@]T)ScM!;6Els8IY%+d+""+b:ef+b:ef+f?L_T)ScK
!;HQns8IY%+cmju+b:ef+b:ef+fQXaT)ScI!;Z]ps8IY%+c[^s+b:ef+b:ef+fcdcT)ScG!;lirs8IY%
+cIRq+b:ef+b:ef+fupeT)ScE!<)uts8IY%+c7Fo+b:ef+b:ef+g3'gT)ScC!!!#us8IY%+c%:m+b:ef
+b:ef+gE3iT)ScB!!*$"s8W(NJK]akJK]RfJK]RfJK_?Crgs,hfDtpNre#bFKHYmiJK]RfJK]Rf[3>O@
rr:UNrr3"OK)gOT+bCkg+b:ef+b:ef+h&WoT)ScB!<3#tK)d'G+b:ef+b:ef+b:ef+h8cqT)ScB!<3#t
KDm$F+b:ef+b:ef+b:ef+hJosT)ScB!<3#tKDZmD+b:ef+b:ef+b:ef+h]&uT)ScB!<3#tKDHaB+b:ef
+b:ef+b:ef+ho3"T)ScB!<3#tKD6U@+b:ef+b:ef+b:ef+i,?$T)ScB!<3#tKD$I>+b:ef+b:ef+b:ef
+i>K&T)ScB!<3#tKCg=<+b:ef+b:ef+b:ef+iPW(T)ScB!<3#tKCU1:+b:ef+b:ef+b:ef+ibc*T)ScB
!<3#tKCC%8+b:ef+b:ef+b:ef+ito,T)ScB!<3#tKC0n6+b:ef+b:ef+b:ef+j2&.T)ScB!<3#tKBsb4
+b:ef+b:ef+b:ef+jD20T)ScB!<3#tKBaV2+b:ef+b:ef+b:ef+jV>2T)ScB!<3#tKBOJ0+b:ef+b:ef
+b:ef+jhJ4T)Sb?
~> 0 37 m 0 0 l 327 0 l 327 37 l h W n EOD
fDtpNre#bFYT\Q@JK]RfJK]RfM';kirr3!!!87GPs8IY%+g)u>+b:ef+b:ef+c@NCT)Scg!8ISRs8IY%
+fli<+b:ef+b:ef+cRZET)Sce!8[_Ts8IY%+fZ]:+b:ef+b:ef+cdfGT)Scc!8mkVs8IY%+fHQ8+b:ef
+b:ef+d!rIT)Sca!9+"Xs8IY%+f6E6+b:ef+b:ef+d4)KT)Sc_!9=.Zs8IY%+f$94+b:ef+b:ef+dF5M
T)Sc]!9O:\s8IY%+eg-2+b:ef+b:ef+dXAOT)Sc[!9aF^s8IY%+eU!0+b:ef+b:ef+djMQT)ScY!9sR`
s8IY%+eBj.+b:ef+b:ef+e'YST)ScW!:0^bs8IY%+e0^,+b:ef+b:ef+e9eUT)ScU!:Bjds8IY%+dsR*
+b:ef+b:ef+eKqWT)ScS!:U!fs8IY%+daF(+b:ef+b:ef+e^(YT)ScQ!:g-hs8IY%+dO:&+b:ef+b:ef
+ep4[T)ScO!;$9js8IY%+d=.$+b:ef+b:ef+f-@]T)ScM!;6Els8IY%+d+""+b:ef+b:ef+f?L_T)ScK
!;HQns8IY%+cmju+b:ef+b:ef+fQXaT)ScI!;Z]ps8IY%+c[^s+b:ef+b:ef+fcdcT)ScG!;lirs8IY%
+cIRq+b:ef+b:ef+fupeT)ScE!<)uts8IY%+c7Fo+b:ef+b:ef+g3'gT)ScC!!!#us8IY%+c%:m+b:ef
+b:ef+gE3iT)ScB!!*$"s8W(NJK]akJK]RfJK]RfJK_?Crgs,hfDtpNre#bFKHYmiJK]RfJK]Rf[3>O@
rr:UNrr3"OK)gOT+bCkg+b:ef+b:ef+h&WoT)ScB!<3#tK)d'G+b:ef+b:ef+b:ef+h8cqT)ScB!<3#t
KDm$F+b:ef+b:ef+b:ef+hJosT)ScB!<3#tKDZmD+b:ef+b:ef+b:ef+h]&uT)ScB!<3#tKDHaB+b:ef
+b:ef+b:ef+ho3"T)ScB!<3#tKD6U@+b:ef+b:ef+b:ef+i,?$T)ScB!<3#tKD$I>+b:ef+b:ef+b:ef
+i>K&T)ScB!<3#tKCg=<+b:ef+b:ef+b:ef+iPW(T)ScB!<3#tKCU1:+b:ef+b:ef+b:ef+ibc*T)ScB
!<3#tKCC%8+b:ef+b:ef+b:ef+ito,T)ScB!<3#tKC0n6+b:ef+b:ef+b:ef+j2&.T)ScB!<3#tKBsb4
+b:ef+b:ef+b:ef+jD20T)ScB!<3#tKBaV2+b:ef+b:ef+b:ef+jV>2T)ScB!<3#tKBOJ0+b:ef+b:ef
+b:ef+jhJ4T)Sb?
~> 0 37 m 0 0 l 327 0 l 327 37 l h W n EOD
fDtpNre#bFYT\Q@JK]RfJK]RfM';kirr3!!!87GPs8IY%+g)u>+b:ef+b:ef+c@NCT)Scg!8ISRs8IY%
+fli<+b:ef+b:ef+cRZET)Sce!8[_Ts8IY%+fZ]:+b:ef+b:ef+cdfGT)Scc!8mkVs8IY%+fHQ8+b:ef
+b:ef+d!rIT)Sca!9+"Xs8IY%+f6E6+b:ef+b:ef+d4)KT)Sc_!9=.Zs8IY%+f$94+b:ef+b:ef+dF5M
T)Sc]!9O:\s8IY%+eg-2+b:ef+b:ef+dXAOT)Sc[!9aF^s8IY%+eU!0+b:ef+b:ef+djMQT)ScY!9sR`
s8IY%+eBj.+b:ef+b:ef+e'YST)ScW!:0^bs8IY%+e0^,+b:ef+b:ef+e9eUT)ScU!:Bjds8IY%+dsR*
+b:ef+b:ef+eKqWT)ScS!:U!fs8IY%+daF(+b:ef+b:ef+e^(YT)ScQ!:g-hs8IY%+dO:&+b:ef+b:ef
+ep4[T)ScO!;$9js8IY%+d=.$+b:ef+b:ef+f-@]T)ScM!;6Els8IY%+d+""+b:ef+b:ef+f?L_T)ScK
!;HQns8IY%+cmju+b:ef+b:ef+fQXaT)ScI!;Z]ps8IY%+c[^s+b:ef+b:ef+fcdcT)ScG!;lirs8IY%
+cIRq+b:ef+b:ef+fupeT)ScE!<)uts8IY%+c7Fo+b:ef+b:ef+g3'gT)ScC!!!#us8IY%+c%:m+b:ef
+b:ef+gE3iT)ScB!!*$"s8W(NJK]akJK]RfJK]RfJK_?Crgs,hfDtpNre#bFKHYmiJK]RfJK]Rf[3>O@
rr:UNrr3"OK)gOT+bCkg+b:ef+b:ef+h&WoT)ScB!<3#tK)d'G+b:ef+b:ef+b:ef+h8cqT)ScB!<3#t
KDm$F+b:ef+b:ef+b:ef+hJosT)ScB!<3#tKDZmD+b:ef+b:ef+b:ef+h]&uT)ScB!<3#tKDHaB+b:ef
+b:ef+b:ef+ho3"T)ScB!<3#tKD6U@+b:ef+b:ef+b:ef+i,?$T)ScB!<3#tKD$I>+b:ef+b:ef+b:ef
+i>K&T)ScB!<3#tKCg=<+b:ef+b:ef+b:ef+iPW(T)ScB!<3#tKCU1:+b:ef+b:ef+b:ef+ibc*T)ScB
!<3#tKCC%8+b:ef+b:ef+b:ef+ito,T)ScB!<3#tKC0n6+b:ef+b:ef+b:ef+j2&.T)ScB!<3#tKBsb4
+b:ef+b:ef+b:ef+jD20T)ScB!<3#tKBaV2+b:ef+b:ef+b:ef+jV>2T)ScB!<3#tKBOJ0+b:ef+b:ef
+b:ef+jhJ4T)Sb?
~> 0 37 m 0 0 l 327 0 l 327 37 l h W n EOD
fDtpNre#bFYT\Q@JK]RfJK]RfM';kirr3!!!87GPs8IY%+g)u>+b:ef+b:ef+c@NCT)Scg!8ISRs8IY%
+fli<+b:ef+b:ef+cRZET)Sce!8[_Ts8IY%+fZ]:+b:ef+b:ef+cdfGT)Scc!8mkVs8IY%+fHQ8+b:ef
+b:ef+d!rIT)Sca!9+"Xs8IY%+f6E6+b:ef+b:ef+d4)KT)Sc_!9=.Zs8IY%+f$94+b:ef+b:ef+dF5M
T)Sc]!9O:\s8IY%+eg-2+b:ef+b:ef+dXAOT)Sc[!9aF^s8IY%+eU!0+b:ef+b:ef+djMQT)ScY!9sR`
s8IY%+eBj.+b:ef+b:ef+e'YST)ScW!:0^bs8IY%+e0^,+b:ef+b:ef+e9eUT)ScU!:Bjds8IY%+dsR*
+b:ef+b:ef+eKqWT)ScS!:U!fs8IY%+daF(+b:ef+b:ef+e^(YT)ScQ!:g-hs8IY%+dO:&+b:ef+b:ef
+ep4[T)ScO!;$9js8IY%+d=.$+b:ef+b:ef+f-@]T)ScM!;6Els8IY%+d+""+b:ef+b:ef+f?L_T)ScK
!;HQns8IY%+cmju+b:ef+b:ef+fQXaT)ScI!;Z]ps8IY%+c[^s+b:ef+b:ef+fcdcT)ScG!;lirs8IY%
+cIRq+b:ef+b:ef+fupeT)ScE!<)uts8IY%+c7Fo+b:ef+b:ef+g3'gT)ScC!!!#us8IY%+c%:m+b:ef
+b:ef+gE3iT)ScB!!*$"s8W(NJK]akJK]RfJK]RfJK_?Crgs,hfDtpNre#bFKHYmiJK]RfJK]Rf[3>O@
rr:UNrr3"OK)gOT+bCkg+b:ef+b:ef+h&WoT)ScB!<3#tK)d'G+b:ef+b:ef+b:ef+h8cqT)ScB!<3#t
KDm$F+b:ef+b:ef+b:ef+hJosT)ScB!<3#tKDZmD+b:ef+b:ef+b:ef+h]&uT)ScB!<3#tKDHaB+b:ef
+b:ef+b:ef+ho3"T)ScB!<3#tKD6U@+b:ef+b:ef+b:ef+i,?$T)ScB!<3#tKD$I>+b:ef+b:ef+b:ef
+i>K&T)ScB!<3#tKCg=<+b:ef+b:ef+b:ef+iPW(T)ScB!<3#tKCU1:+b:ef+b:ef+b:ef+ibc*T)ScB
!<3#tKCC%8+b:ef+b:ef+b:ef+ito,T)ScB!<3#tKC0n6+b:ef+b:ef+b:ef+j2&.T)ScB!<3#tKBsb4
+b:ef+b:ef+b:ef+jD20T)ScB!<3#tKBaV2+b:ef+b:ef+b:ef+jV>2T)ScB!<3#tKBOJ0+b:ef+b:ef
+b:ef+jhJ4T)Sb?
~> 0 37 m 0 0 l 327 0 l 327 37 l h W n EOD
fDtpNre#bFYT\Q@JK]RfJK]RfM';kirr3!!!87GPs8IY%+g)u>+b:ef+b:ef+c@NCT)Scg!8ISRs8IY%
+fli<+b:ef+b:ef+cRZET)Sce!8[_Ts8IY%+fZ]:+b:ef+b:ef+cdfGT)Scc!8mkVs8IY%+fHQ8+b:ef
+b:ef+d!rIT)Sca!9+"Xs8IY%+f6E6+b:ef+b:ef+d4)KT)Sc_!9=.Zs8IY%+f$94+b:ef+b:ef+dF5M
T)Sc]!9O:\s8IY%+eg-2+b:ef+b:ef+dXAOT)Sc[!9aF^s8IY%+eU!0+b:ef+b:ef+djMQT)ScY!9sR`
s8IY%+eBj.+b:ef+b:ef+e'YST)ScW!:0^bs8IY%+e0^,+b:ef+b:ef+e9eUT)ScU!:Bjds8IY%+dsR*
+b:ef+b:ef+eKqWT)ScS!:U!fs8IY%+daF(+b:ef+b:ef+e^(YT)ScQ!:g-hs8IY%+dO:&+b:ef+b:ef
+ep4[T)ScO!;$9js8IY%+d=.$+b:ef+b:ef+f-@]T)ScM!;6Els8IY%+d+""+b:ef+b:ef+f?L_T)ScK
!;HQns8IY%+cmju+b:ef+b:ef+fQXaT)ScI!;Z]ps8IY%+c[^s+b:ef+b:ef+fcdcT)ScG!;lirs8IY%
+cIRq+b:ef+b:ef+fupeT)ScE!<)uts8IY%+c7Fo+b:ef+b:ef+g3'gT)ScC!!!#us8IY%+c%:m+b:ef
+b:ef+gE3iT)ScB!!*$"s8W(NJK]akJK]RfJK]RfJK_?Crgs,hfDtpNre#bFKHYmiJK]RfJK]Rf[3>O@
rr:UNrr3"OK)gOT+bCkg+b:ef+b:ef+h&WoT)ScB!<3#tK)d'G+b:ef+b:ef+b:ef+h8cqT)ScB!<3#t
KDm$F+b:ef+b:ef+b:ef+hJosT)ScB!<3#tKDZmD+b:ef+b:ef+b:ef+h]&uT)ScB!<3#tKDHaB+b:ef
+b:ef+b:ef+ho3"T)ScB!<3#tKD6U@+b:ef+b:ef+b:ef+i,?$T)ScB!<3#tKD$I>+b:ef+b:ef+b:ef
+i>K&T)ScB!<3#tKCg=<+b:ef+b:ef+b:ef+iPW(T)ScB!<3#tKCU1:+b:ef+b:ef+b:ef+ibc*T)ScB
!<3#tKCC%8+b:ef+b:ef+b:ef+ito,T)ScB!<3#tKC0n6+b:ef+b:ef+b:ef+j2&.T)ScB!<3#tKBsb4
+b:ef+b:ef+b:ef+jD20T)ScB!<3#tKBaV2+b:ef+b:ef+b:ef+jV>2T)ScB!<3#tKBOJ0+b:ef+b:ef
+b:ef+jhJ4T)Sb?
~> 0 37 m 0 0 l 327 0 l 327 37 l h W n EOD
fDtpNre#bFYT\Q@JK]RfJK]RfM';kirr3!!!87GPs8IY%+g)u>+b:ef+b:ef+c@NCT)Scg!8ISRs8IY%
+fli<+b:ef+b:ef+cRZET)Sce!8[_Ts8IY%+fZ]:+b:ef+b:ef+cdfGT)Scc!8mkVs8IY%+fHQ8+b:ef
+b:ef+d!rIT)Sca!9+"Xs8IY%+f6E6+b:ef+b:ef+d4)KT)Sc_!9=.Zs8IY%+f$94+b:ef+b:ef+dF5M
T)Sc]!9O:\s8IY%+eg-2+b:ef+b:ef+dXAOT)Sc[!9aF^s8IY%+eU!0+b:ef+b:ef+djMQT)ScY!9sR`
s8IY%+eBj.+b:ef+b:ef+e'YST)ScW!:0^bs8IY%+e0^,+b:ef+b:ef+e9eUT)ScU!:Bjds8IY%+dsR*
+b:ef+b:ef+eKqWT)ScS!:U!fs8IY%+daF(+b:ef+b:ef+e^(YT)ScQ!:g-hs8IY%+dO:&+b:ef+b:ef
+ep4[T)ScO!;$9js8IY%+d=.$+b:ef+b:ef+f-@]T)ScM!;6Els8IY%+d+""+b:ef+b:ef+f?L_T)ScK
!;HQns8IY%+cmju+b:ef+b:ef+fQXaT)ScI!;Z]ps8IY%+c[^s+b:ef+b:ef+fcdcT)ScG!;lirs8IY%
+cIRq+b:ef+b:ef+fupeT)ScE!<)uts8IY%+c7Fo+b:ef+b:ef+g3'gT)ScC!!!#us8IY%+c%:m+b:ef
+b:ef+gE3iT)ScB!!*$"s8W(NJK]akJK]RfJK]RfJK_?Crgs,hfDtpNre#bFKHYmiJK]RfJK]Rf[3>O@
rr:UNrr3"OK)gOT+bCkg+b:ef+b:ef+h&WoT)ScB!<3#tK)d'G+b:ef+b:ef+b:ef+h8cqT)ScB!<3#t
KDm$F+b:ef+b:ef+b:ef+hJosT)ScB!<3#tKDZmD+b:ef+b:ef+b:ef+h]&uT)ScB!<3#tKDHaB+b:ef
+b:ef+b:ef+ho3"T)ScB!<3#tKD6U@+b:ef+b:ef+b:ef+i,?$T)ScB!<3#tKD$I>+b:ef+b:ef+b:ef
+i>K&T)ScB!<3#tKCg=<+b:ef+b:ef+b:ef+iPW(T)ScB!<3#tKCU1:+b:ef+b:ef+b:ef+ibc*T)ScB
!<3#tKCC%8+b:ef+b:ef+b:ef+ito,T)ScB!<3#tKC0n6+b:ef+b:ef+b:ef+j2&.T)ScB!<3#tKBsb4
+b:ef+b:ef+b:ef+jD20T)ScB!<3#tKBaV2+b:ef+b:ef+b:ef+jV>2T)ScB!<3#tKBOJ0+b:ef+b:ef
+b:ef+jhJ4T)Sb?
~> 0 37 m 0 0 l 327 0 l 327 37 l h W n EOD
fDtpNre#bFYT\Q@JK]RfJK]RfM';kirr3!!!87GPs8IY%+g)u>+b:ef+b:ef+c@NCT)Scg!8ISRs8I\&
+fli<+b:ef+b:ef+cRZETDnlf!8[_Ts8J"/+fZ]:+b:ef+b:ef+cdfGW;chm!8mkVs8JF;+fHQ8+b:ef
+b:ef+d!rI[/U+"!9+"Xs8JgF+f6E6+b:ef+b:ef+d4)K^]+9+!9=.Zs8KHX+f$94+b:ef+b:ef+dF5M
d/O(:!9O:\s8LW$+eg-2+b:ef+b:ef+dXAOo)A[Z!9aF^s8Mfm,(Uo4+b:ef+b:ef+b:f,+oXCss6fsQ
!;lfq4FnZL+b:ef+b:ef+b:f.+oYR?s6TgQ!;lfqDLit'+b:ef+b:ef+b:f0+o[>qs6B[Q!;lfqW.?+_
+b:ef+b:ef+b:f2+o]CVs60OQ!;lfqiIN/A+b:ef+b:ef+b:f7+oWkgp\Y!R!:g-bs8G?9+e0^,+b:ef
+b:ef+fQXa?24H]!;$9ds8J45+dsR*+b:ef+b:ef+fcdcY5&%W!;6Efs8M*Y,(Uo,+b:ef+b:ef+b:f@
+oX"kp%\RG!;HQes8H/P+djL)+b:ef+b:ef+gN9jFS5[k!;Z]gs8Kic+dX@'+b:ef+b:ef+h&Wo,6$<h
s4m\Q!:p0h9n=IT+b:ef+b:ef+b:fI+oZ0Gs4[PQ!:p0h\q)#j+b:ef+b:ef+b:fN+oW\be+3Ol!!!#f
s8H5R+dX@'+b:ef+b:ef+i#9#G45I`!!*&gs8LjR-\3G.+b:ef+b:ef+b:fU+oX1pmI1)-!<3#es8J"/
+dO:&+b:ef+b:ef+ibc*VsOH9!;ules8Mop;1TmW+b:ef+b:ef+b:f\+oZ0>s4@>Js7$'fjo-rb+daF(
+b:ef+b:ef+jhJ44oY$:s4@>Hs6p!e^&B:.+djL)+b:ef+b:ef+k@h9.fRlYs4@>Fs6fpdW.?+Y+b:ef
+b:ef+b:fk+oWee^Z5@H!;-<Ys8J76+daF(+b:ef+b:ef+lFOC,6"b's4@>Bs6TdbP^t!G+b:ef+b:ef
+b:fu+oWeeX53g.!:^$Ss8Jtr,_7,0+b:ef+b:ef+b:g%+oWqi^"WM=!:KmPs8K_20S(C=+b:ef+b:ef
+b:g*+oXP%ce&3L!:9aMs8M-Z;1Tm_+b:ef+b:ef+b:g/+oYsMn'qBi!:'UJs8MopNW(;V+ep33+b:ef
+b:ef+oEM_/H26ds4@>8s5a4Zh>UW0+f$94+b:ef+b:ef+oZ9Vkfa"Y!9X=>s8KV/9n=Id+b:ef+b:ef
+c.BA>5lU^s4@>4s4mYR_>[U:,(Uo@+b:ef+b:ef+d=/L,lVBSc+j;2!94%2s8M*YPQ!n"+gW>C+b:ef
+b:f,+oY.6SGqibs*t
~> 0 37 m 0 33 l 327 33 l 327 37 l h W n EOD
fDrJ^roF'Br^)/Zq]UM6JK]RfJK]Rfe04farg`uR\c2[1!87FWs8M!VW;^]64T6O\+b:ef+b:ef+b:fu
+oWbd6N2-,YQ!ais8;rQ!2TYoq#8nE[f3*%RJr3FKU@CCK7SZ+K7SZ+KDC0!L&R/4S,T;a])LI`qP=/g
!8[^,s.o[Gs+13$s+13$s+13$s+13$s+13$s+13$s+13$s+13$s+13$s+13$s+13$s+13$s+13$s+13$
s+13$s+13$s+13$s+13$s+13$s+13$s+13$s+13$s+13$s+13$s+13$s+13$s+13$s+13$s+13$s+13$
s+13$s+13$s+13$s+13$s+13$s+13$s+13$s+13$s+13$s+13$s+13$s+13$s+13$s+13$s+13$s+13$
s+13$s+13$s+13$s+13$s+13$s+13$s+13$s+13$s+13$s+13$s+13$s+13$s+13$s+13$s+13$s+13$
s+13$s+13$s+13$s+13$s+13$s+13$s+13$s+13$s+13$s+13$s+13$s+13$s+13$s+13$s+13$s+13$
s+13$s+13$s+13$s+13$s+13$s+13$s+13$s+13$s+13$s+13$s+13$s+13$s+13$s+13$s+13$s+13$
s+13$s+13$s+13$s+13$s+13$s+13$s+13$s+13$s+13$s+13$s+13$s+13$s+13$s+13$s+13$s+13$
s+13$s+13$s+13$s+13$s+13$s+13$s+13$s+13$s+13$s+13$s+13$s+13$s+13$s+13$s+13$s+13$
s+13$s+13$s+13$s+13$s+13$s+13$s+13$s+13$s3(Fm
~> restore
Q
/Cs2 SC
0.11765 0.11765 0.11765 sc
q
0 0 m
120.96 0 l
120.96 120.96 l
0 120.96 l
h
0 0 m
W
0 0 120.96 120.96 rc
1 0 0 -1 -259.19998 685.44 cm
/F1.1[ 4 0 0 -4 0 0]sf
310.00998 675.84485 m
(!"#$%&'"\(\)*)[ 2.372000 1.260000 2.148000 1.260000 1.112000 0.888000 2.296000 1.260000 2.372000 2.148000 0.000000 ] xS
1.4853215 w
1 J
1 j
0.60000002 i
/Cs1 SC
1 1 1 sc
346.07996 603.64478 m
342.99759 600.04956 339.11691 597.03833 334.54547 594.90668 c
317.38113 586.90277 296.9783 594.3288 288.97449 611.49316 c
286.84277 616.06458 285.80557 620.86572 285.75531 625.6012 c
h
346.07996 603.64478 m
S
0.74266076 w
343.05243 604.32104 m
340.38474 601.4873 337.14499 599.10242 333.40271 597.35736 c
317.59183 589.98456 298.79785 596.82501 291.42517 612.63593 c
289.68008 616.37823 288.73129 620.28766 288.50922 624.17316 c
h
343.05243 604.32104 m
S
0 i
CM
71.31086 78.627724 m
70.483253 79.173523 69.605515 79.665634 68.680161 80.09713 c
58.476131 84.855377 46.346859 80.440681 41.588661 70.236633 c
41.157162 69.311279 40.801098 68.370102 40.517944 67.420013 c
h
71.31086 78.627724 m
f
0.60000002 i
1 0 0 -1 -259.19998 685.44 cm
330.51086 606.81226 m
329.68326 606.26648 328.80551 605.77435 327.88016 605.34283 c
317.67612 600.58459 305.54684 604.99933 300.78867 615.20337 c
300.35715 616.12872 300.0011 617.06989 299.71793 618.01996 c
h
330.51086 606.81226 m
S
0 i
0 0 0 sc
CM
62.684063 80.53511 m
63.688911 79.24897 l
65.222618 79.80719 l
64.309937 78.454086 l
65.314789 77.167938 l
63.745872 77.617821 l
62.833187 76.264717 l
62.776226 77.895859 l
61.207314 78.345741 l
62.741024 78.903969 l
h
62.684063 80.53511 m
f
53.320675 80.150085 m
54.32552 78.863937 l
55.85923 79.422165 l
54.946548 78.069054 l
55.951397 76.782913 l
54.382481 77.232788 l
53.469799 75.879684 l
53.412838 77.510834 l
51.843922 77.960709 l
53.377636 78.518936 l
h
53.320675 80.150085 m
f
45.900406 74.426361 m
46.905254 73.140221 l
48.438965 73.698441 l
47.526283 72.345337 l
48.531128 71.059189 l
46.962215 71.509071 l
46.049534 70.15596 l
45.992573 71.787109 l
44.423656 72.236992 l
45.957367 72.795212 l
h
45.900406 74.426361 m
f
2 w
2 J
0 j
0.60000002 i
1 1 1 sc
1 0 0 -1 -259.19998 685.44 cm
278.32993 628.30377 m
353.50534 600.9422 l
S
0.5 w
279.28787 630.93567 m
354.46326 603.5741 l
S
0 i
0.93969262 0.34202015 0.34202015 -0.93969262 -453.51932 538.50018 cm
/F2.1[ 12.427 0 0 -12.427 0 0]sf
279.12109 628.18976 m
(!"#$!%&$"')[ 8.972294 8.288809 8.288809 7.592897 8.972294 4.834103 8.972294 7.592897 8.288809 0.000000 ] xS
1.4853215 w
1 J
1 j
0.60000002 i
1 0 0 -1 -259.19998 685.44 cm
353.60468 624.31879 m
353.55441 629.05426 352.51721 633.85541 350.3855 638.42682 c
342.38168 655.59119 321.97885 663.01721 304.81451 655.01331 c
300.24307 652.88159 296.3624 649.87042 293.28003 646.27515 c
h
353.60468 624.31879 m
S
0.74266076 w
350.85077 625.74683 m
350.62869 629.63232 349.6799 633.54175 347.93481 637.28406 c
340.56213 653.09497 321.76816 659.93542 305.95728 652.56262 c
302.215 650.81757 298.97522 648.43268 296.30756 645.59894 c
h
350.85077 625.74683 m
S
0 i
CM
80.442055 53.539978 m
80.158897 52.589897 79.802834 51.648716 79.371338 50.723366 c
74.613136 40.519314 62.483868 36.104618 52.279839 40.862869 c
51.354485 41.294365 50.476746 41.786476 49.649136 42.332275 c
h
80.442055 53.539978 m
f
0.60000002 i
1 0 0 -1 -259.19998 685.44 cm
339.64206 631.90002 m
339.35889 632.8501 339.00284 633.79126 338.57132 634.71661 c
333.81314 644.92065 321.68387 649.33539 311.47983 644.57709 c
310.55447 644.14563 309.67673 643.6535 308.84912 643.10773 c
h
339.64206 631.90002 m
S
0 i
0 0 0 sc
CM
75.059593 46.533634 m
75.002632 48.16478 l
76.536339 48.723007 l
74.967422 49.172886 l
74.910461 50.804031 l
73.99778 49.450928 l
72.428864 49.900806 l
73.433716 48.614662 l
72.521034 47.261555 l
74.054741 47.819778 l
h
75.059593 46.533634 m
f
67.63932 40.809914 m
67.582359 42.441063 l
69.116074 42.999287 l
67.547157 43.449165 l
67.490196 45.080315 l
66.577515 43.727207 l
65.008598 44.177086 l
66.013451 42.890942 l
65.100761 41.537834 l
66.634476 42.096058 l
h
67.63932 40.809914 m
f
58.275932 40.424885 m
58.218971 42.05603 l
59.752682 42.614254 l
58.183769 43.064133 l
58.126808 44.695282 l
57.214127 43.342175 l
55.64521 43.792053 l
56.650059 42.505909 l
55.737373 41.152802 l
57.271088 41.711029 l
h
58.275932 40.424885 m
f
2 w
2 J
0 j
0.60000002 i
1 1 1 sc
1 0 0 -1 -259.19998 685.44 cm
285.51263 648.03809 m
360.68805 620.67651 l
S
0.5 w
284.55469 645.40619 m
359.7301 618.04456 l
S
ep
end
%%Trailer
%%EOF
