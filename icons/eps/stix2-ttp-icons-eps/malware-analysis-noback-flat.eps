%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 97.679082 111.399989
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.14.3 (Build 18D109) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 98 112
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 98 112
%%BeginPageSetup
cg_md begin
bp
sdmtx
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
0.95390701 0.193701 0.15056799 sc
q
0 0 m
97.679085 0 l
97.679085 111.39999 l
0 111.39999 l
h
0 0 m
W
0 0 97.679085 111.39999 rc
72.814575 67.437508 m
73.158546 67.358025 73.485138 67.184273 73.753166 66.916245 c
74.230522 66.438896 74.408852 65.775749 74.288147 65.159584 c
76.176918 63.979347 l
77.144127 65.313988 78.579514 66.318405 80.311661 66.7183 c
84.118088 67.597099 87.916191 65.223778 88.794968 61.417343 c
89.135292 59.943249 88.987885 58.470402 88.458397 57.167873 c
88.958961 56.855087 l
89.838661 58.753754 90.116821 60.94857 89.609642 63.145397 c
88.653984 67.284843 85.195282 70.195534 81.20137 70.647812 c
81.20137 70.647812 l
82.906288 74.266068 82.263245 78.715874 79.272247 81.706856 c
77.678001 83.301109 75.669289 84.228294 73.592957 84.488396 c
73.592957 83.898148 l
74.978149 83.656944 76.305305 83.001465 77.375061 81.931702 c
80.137421 79.16935 80.137421 74.690712 77.375061 71.928368 c
76.118034 70.671333 74.5056 69.98632 72.861221 69.873337 c
72.861221 67.489632 l
72.845604 67.472313 72.830055 67.454941 72.814575 67.437515 c
h
71.932213 67.437515 m
71.916733 67.454941 71.901184 67.472313 71.885574 67.489632 c
71.885574 69.873337 l
70.241196 69.98632 68.628754 70.671333 67.371727 71.928368 c
64.609367 74.690712 64.609367 79.16935 67.371727 81.931702 c
68.44149 83.001465 69.768646 83.656944 71.153839 83.898148 c
71.153839 84.488396 l
69.077507 84.228294 67.068794 83.301109 65.474548 81.706856 c
62.483547 78.715874 61.840508 74.266068 63.545422 70.647812 c
59.551514 70.195534 56.092808 67.284843 55.13715 63.145397 c
54.629967 60.94857 54.908127 58.753754 55.78783 56.855087 c
56.288395 57.167873 l
55.758904 58.470402 55.6115 59.943249 55.951824 61.417343 c
56.830597 65.223778 60.628704 67.597099 64.435135 66.7183 c
66.167282 66.318405 67.602661 65.313988 68.56987 63.979347 c
70.458641 65.159584 l
70.337944 65.775749 70.516266 66.438896 70.993629 66.916245 c
71.26165 67.184273 71.588249 67.358025 71.932213 67.437508 c
h
70.884415 64.275177 m
69.086884 63.151951 l
69.862457 61.697563 70.135994 59.96714 69.736092 58.234993 c
68.857315 54.428562 65.059212 52.055241 61.252785 52.934036 c
59.778687 53.274353 58.51952 54.052494 57.580929 55.099388 c
57.080364 54.786602 l
58.401237 53.163609 60.251987 51.951454 62.448818 51.444283 c
66.285385 50.558529 70.115822 52.068047 72.373398 54.993824 c
74.630966 52.068047 78.461403 50.558529 82.297974 51.444283 c
84.494804 51.951454 86.345551 53.163609 87.666428 54.786602 c
87.165863 55.099388 l
86.227272 54.052494 84.968102 53.274353 83.494011 52.934036 c
79.687576 52.055241 75.889473 54.428562 75.010704 58.234993 c
74.610802 59.96714 74.884338 61.697563 75.659904 63.151951 c
73.862373 64.275177 l
73.827904 64.234566 73.791496 64.195038 73.753166 64.156708 c
72.991142 63.394676 71.755653 63.394676 70.993629 64.156708 c
70.955292 64.195038 70.918892 64.234566 70.884415 64.275177 c
h
70.884415 64.275177 m
f
79.084961 64.454453 m
78.839767 63.149555 78.212311 61.902332 77.202591 60.89262 c
76.985413 60.675442 76.757256 60.475948 76.51989 60.29414 c
76.51989 56.887398 l
77.515976 57.354851 78.449326 58.000038 79.272247 58.822964 c
81.300385 60.851093 82.248947 63.54998 82.117935 66.205536 c
h
62.628857 66.205536 m
62.497845 63.54998 63.446407 60.851093 65.474548 58.822964 c
66.29747 58.000038 67.23082 57.354851 68.226898 56.887398 c
68.226898 60.29414 l
67.98954 60.475948 67.761375 60.675442 67.544197 60.89262 c
66.534477 61.902332 65.907021 63.149555 65.661827 64.454453 c
h
69.399986 71.872147 m
71.272972 72.777733 73.473824 72.777733 75.346809 71.872147 c
78.222252 73.532288 l
74.766464 76.126945 69.980331 76.126945 66.524536 73.532288 c
h
69.399986 71.872147 m
f
39.396919 42.63295 m
50.467041 42.63295 l
50.467041 41.699944 l
39.396919 41.699944 l
h
39.396919 42.63295 m
f
1 J
1 j
0.60000002 i
1 0 0 -1 -532.08002 395.28 cm
571.47693 352.64703 m
582.547 352.64703 l
582.547 353.58005 l
571.47693 353.58005 l
h
571.47693 352.64703 m
S
0 i
CM
28.182663 29.675787 m
17.569048 29.675787 l
17.236067 29.675787 16.966133 29.421612 16.966133 29.108068 c
16.966133 23.005098 l
16.966133 22.691557 17.236067 22.43738 17.569048 22.43738 c
69.841728 22.43738 l
70.174713 22.43738 70.444641 22.691557 70.444641 23.005098 c
70.444641 29.108068 l
70.444641 29.421612 70.174713 29.675787 69.841728 29.675787 c
43.853798 29.675787 l
43.930916 29.77117 43.976704 29.890232 43.976704 30.019361 c
43.976704 31.606028 l
43.976704 31.919571 43.706768 32.173748 43.373787 32.173748 c
28.662676 32.173748 l
28.329695 32.173748 28.059761 31.919571 28.059761 31.606028 c
28.059761 30.019361 l
28.059761 29.890232 28.105545 29.77117 28.182663 29.675787 c
h
28.182663 29.675787 m
f
0.60000002 i
1 0 0 -1 -532.08002 395.28 cm
560.26263 365.60422 m
549.64905 365.60422 l
549.31604 365.60422 549.04614 365.85837 549.04614 366.17194 c
549.04614 372.2749 l
549.04614 372.58844 549.31604 372.84262 549.64905 372.84262 c
601.92169 372.84262 l
602.2547 372.84262 602.52466 372.58844 602.52466 372.2749 c
602.52466 366.17194 l
602.52466 365.85837 602.2547 365.60422 601.92169 365.60422 c
575.93378 365.60422 l
576.01093 365.50882 576.0567 365.38977 576.0567 365.26062 c
576.0567 363.67395 l
576.0567 363.36041 575.78674 363.10623 575.4538 363.10623 c
560.74268 363.10623 l
560.40967 363.10623 560.13977 363.36041 560.13977 363.67395 c
560.13977 365.26062 l
560.13977 365.38977 560.18555 365.50882 560.26263 365.60422 c
h
560.26263 365.60422 m
S
0 i
CM
16.966133 33.567127 m
16.966133 33.397125 l
55.062687 33.397125 l
56.139084 33.397125 57.011677 34.269718 57.011677 35.346119 c
57.011677 35.346119 l
57.011677 36.422516 56.139084 37.295109 55.062687 37.295109 c
31.504118 37.295109 l
27.638124 37.295109 24.504118 40.429115 24.504118 44.295109 c
24.504118 63.296776 l
24.504118 66.419113 27.035271 68.950264 30.157606 68.950264 c
32.558674 68.950264 l
34.354939 68.950264 35.811096 70.406425 35.811096 72.202682 c
35.811096 72.202682 l
35.811096 73.998947 34.354939 75.455109 32.558674 75.455109 c
17.437258 75.455109 l
17.437258 75.283089 l
17.201694 75.283089 l
17.071598 75.283089 16.966133 75.177628 16.966133 75.047531 c
16.966133 37.295109 l
h
16.966133 33.567127 m
f
0.60000002 i
1 0 0 -1 -532.08002 395.28 cm
549.04614 361.71286 m
549.04614 361.88287 l
587.1427 361.88287 l
588.21906 361.88287 589.09167 361.01028 589.09167 359.93387 c
589.09167 359.93387 l
589.09167 358.85748 588.21906 357.98489 587.1427 357.98489 c
563.58411 357.98489 l
559.71814 357.98489 556.58411 354.85086 556.58411 350.98489 c
556.58411 331.98322 l
556.58411 328.86087 559.11523 326.32974 562.23761 326.32974 c
564.63867 326.32974 l
566.43494 326.32974 567.89111 324.87357 567.89111 323.0773 c
567.89111 323.0773 l
567.89111 321.28104 566.43494 319.82489 564.63867 319.82489 c
549.51727 319.82489 l
549.51727 319.99689 l
549.28168 319.99689 l
549.15161 319.99689 549.04614 320.10236 549.04614 320.23245 c
549.04614 357.98489 l
h
549.04614 361.71286 m
S
0 i
CM
36.300518 95.746048 m
41.939026 78.306259 l
47.577538 95.746048 l
h
36.300518 95.746048 m
f
0.60000002 i
1 1 1 sc
1 0 0 -1 -532.08002 395.28 cm
568.38049 299.53394 m
574.01904 316.97372 l
579.65753 299.53394 l
h
568.38049 299.53394 m
S
0 i
0.95390701 0.193701 0.15056799 sc
CM
34.284199 91.869972 m
41.001122 73.70887 l
41.192699 73.19088 41.767921 72.92627 42.285915 73.117851 c
42.559753 73.219131 42.775654 73.435036 42.876934 73.70887 c
49.593857 91.869972 l
49.785439 92.38797 49.520828 92.963188 49.002838 93.15477 c
48.891796 93.195839 48.774342 93.216866 48.655949 93.216866 c
35.222107 93.216866 l
34.669823 93.216866 34.222107 92.76915 34.222107 92.216866 c
34.222107 92.098473 34.24313 91.981018 34.284199 91.869972 c
h
34.284199 91.869972 m
f
0.60000002 i
1 1 1 sc
1 0 0 -1 -532.08002 395.28 cm
566.3642 303.41 m
573.08112 321.57111 l
573.27271 322.08911 573.8479 322.35373 574.36591 322.16214 c
574.63977 322.06085 574.85565 321.84497 574.95691 321.57111 c
581.67383 303.41 l
581.86542 302.89203 581.60083 302.3168 581.08282 302.12521 c
580.9718 302.08417 580.85431 302.06314 580.73596 302.06314 c
567.30212 302.06314 l
566.74982 302.06314 566.30212 302.51083 566.30212 303.06314 c
566.30212 303.18152 566.32312 303.29898 566.3642 303.41 c
h
566.3642 303.41 m
S
0 i
0.95390701 0.193701 0.15056799 sc
CM
42.274239 51.439682 m
44.416313 62.58239 l
44.520576 63.124744 45.044762 63.479889 45.587116 63.375626 c
45.988903 63.298386 46.303112 62.98418 46.380352 62.58239 c
48.522427 51.439682 l
48.62669 50.897327 48.271545 50.373142 47.729191 50.268879 c
47.666973 50.25692 47.603764 50.2509 47.540409 50.2509 c
43.256256 50.2509 l
42.703972 50.2509 42.256256 50.698612 42.256256 51.2509 c
42.256256 51.314255 42.262276 51.377464 42.274239 51.439682 c
h
42.274239 51.439682 m
f
0.60000002 i
1 0 0 -1 -532.08002 395.28 cm
574.35425 343.8403 m
576.49628 332.6976 l
576.60059 332.15524 577.12476 331.80011 577.66711 331.90436 c
578.06891 331.9816 578.38312 332.29581 578.46033 332.6976 c
580.60242 343.8403 l
580.70667 344.38266 580.35156 344.90686 579.8092 345.01111 c
579.74695 345.02307 579.68378 345.02908 579.62042 345.02908 c
575.33624 345.02908 l
574.78394 345.02908 574.33624 344.58139 574.33624 344.02908 c
574.33624 343.96573 574.34229 343.90253 574.35425 343.8403 c
h
574.35425 343.8403 m
S
0 i
CM
36.2033 56.992256 m
39.586697 56.992256 l
40.138981 56.992256 40.586697 56.54454 40.586697 55.992256 c
40.586697 53.0009 l
40.586697 52.448612 40.138981 52.0009 39.586697 52.0009 c
36.2033 52.0009 l
35.651016 52.0009 35.2033 52.448612 35.2033 53.0009 c
35.2033 55.992256 l
35.2033 56.54454 35.651016 56.992256 36.2033 56.992256 c
h
36.2033 56.992256 m
f
0.60000002 i
1 0 0 -1 -532.08002 395.28 cm
568.28326 338.28775 m
571.66669 338.28775 l
572.21899 338.28775 572.66669 338.73544 572.66669 339.28775 c
572.66669 342.27908 l
572.66669 342.83139 572.21899 343.27908 571.66669 343.27908 c
568.28326 343.27908 l
567.73102 343.27908 567.28326 342.83139 567.28326 342.27908 c
567.28326 339.28775 l
567.28326 338.73544 567.73102 338.28775 568.28326 338.28775 c
h
568.28326 338.28775 m
S
0 i
CM
35.786049 88.689674 m
48.092007 88.689674 l
49.196575 88.689674 50.092007 87.794243 50.092007 86.689674 c
50.092007 57.902882 l
50.092007 56.798309 49.196575 55.902882 48.092007 55.902882 c
35.786049 55.902882 l
34.68148 55.902882 33.786049 56.798309 33.786049 57.902882 c
33.786049 86.689674 l
33.786049 87.794243 34.68148 88.689674 35.786049 88.689674 c
h
35.786049 88.689674 m
f
0.60000002 i
1 0 0 -1 -532.08002 395.28 cm
567.86603 306.59033 m
580.172 306.59033 l
581.27655 306.59033 582.172 307.48575 582.172 308.59033 c
582.172 337.37711 l
582.172 338.48169 581.27655 339.37711 580.172 339.37711 c
567.86603 339.37711 l
566.76147 339.37711 565.86603 338.48169 565.86603 337.37711 c
565.86603 308.59033 l
565.86603 307.48575 566.76147 306.59033 567.86603 306.59033 c
h
567.86603 306.59033 m
S
0 i
CM
31.836918 55.902882 m
52.041138 55.902882 l
52.041138 57.242256 l
31.836918 57.242256 l
h
31.836918 55.902882 m
f
0.60000002 i
1 0 0 -1 -532.08002 395.28 cm
563.91693 339.37711 m
584.12115 339.37711 l
584.12115 338.03775 l
563.91693 338.03775 l
h
563.91693 339.37711 m
S
0 i
CM
31.836918 87.350296 m
52.041138 87.350296 l
52.041138 88.689674 l
31.836918 88.689674 l
h
31.836918 87.350296 m
f
0.60000002 i
1 0 0 -1 -532.08002 395.28 cm
563.91693 307.92969 m
584.12115 307.92969 l
584.12115 306.59033 l
563.91693 306.59033 l
h
563.91693 307.92969 m
S
0 i
CM
31.80229 79.90065 m
35.747429 76.088684 35.747429 69.908264 31.80229 66.096291 c
27.857174 62.284302 21.460882 62.284302 17.515766 66.096291 c
13.570629 69.908264 13.570629 76.088684 17.515766 79.90065 c
21.460882 83.712639 27.857174 83.712639 31.80229 79.90065 c
f
0.60000002 i
1 1 1 sc
1 0 0 -1 -532.08002 395.28 cm
563.88226 315.37933 m
567.82739 319.19131 567.82739 325.37173 563.88226 329.18369 c
559.93713 332.9957 553.54089 332.9957 549.59576 329.18369 c
545.65063 325.37173 545.65063 319.19131 549.59576 315.37933 c
553.54089 311.56735 559.93713 311.56735 563.88226 315.37933 c
S
0 i
0.95390701 0.193701 0.15056799 sc
CM
26.745426 75.014458 m
27.897718 73.901054 27.897718 72.095886 26.745426 70.982491 c
25.59314 69.869087 23.724916 69.869087 22.57263 70.982491 c
21.420338 72.095886 21.420338 73.901054 22.57263 75.014458 c
23.724916 76.127861 25.59314 76.127861 26.745426 75.014458 c
f
0.60000002 i
1 1 1 sc
1 0 0 -1 -532.08002 395.28 cm
558.82544 320.26553 m
559.97772 321.37894 559.97772 323.18411 558.82544 324.29752 c
557.67316 325.41092 555.80493 325.41092 554.65259 324.29752 c
553.50031 323.18411 553.50031 321.37894 554.65259 320.26553 c
555.80493 319.15213 557.67316 319.15213 558.82544 320.26553 c
S
ep
end
%%Trailer
%%EOF
