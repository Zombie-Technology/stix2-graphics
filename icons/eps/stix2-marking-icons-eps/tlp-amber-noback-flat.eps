%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 97.165827 89.757971
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.14.3 (Build 18D109) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 98 90
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 98 90
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: Copperplate-Bold
%!FontType1-1.0: Copperplate-Bold 1.0000.1.0000
14 dict begin/FontName /Copperplate-Bold def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /T put
dup 34 /L put
dup 35 /P put
dup 36 /colon put
dup 37 /A put
dup 38 /M put
dup 39 /B put
dup 40 /E put
dup 41 /R put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[1000 -581 1 index div -288 2 index div 1743 3 index div 928 5 -1 roll div]cvx def
/sfnts [<



01A2020E024E02F0035803E2043A04A000010000000B0118000F00840005000100000000000A00000200044B00040001B800002B00BA0001000400022B01BA0005000300022B01BF0005002A0020001A0013000C000000082BBF0006002E0029001A0013000C000000082BBF000700250020001A0013000C000000082B00BF00010030002900210013000C000000082BBF000200420036002A001C0012000000082BBF0003003600290021001C000C000000082BBF000400260020001A0013000C000000082B00BA0008000400072BB8000020457D691844
00>] def
/CharStrings 11 dict dup begin
/.notdef 0 def
/colon 1 def
/A 2 def
/B 3 def
/E 4 def
/L 5 def
/M 6 def
/P 7 def
/R 8 def
/T 9 def
/u1FFE 10 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] def
/FontBBox{-581 -288 1743 928}def
/UniqueID 4390346 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C5586B741EEB93F3C73016EC16BFF283758900903D203992EFC8BAFAF13579C602F38C91B5BF8E443649147905228038171EB73F3E0B647FF27DF9EB6CBB52D7BA427F252DF81FEB9E3AD677E27BA9EB22A4DE52E42063B121A331FDFF332DC6D475094D71E3A481355B0C154F5E7698EAEDB925B703C3F786F53AB40E6B65E5771282F7D53AB7DD1C607F6334062E78D2DB40C4CF943C8760DFE5D4E6F9457F5A951B84406128BF964349B08894666F93FE01E19D5142A227E4201B0A049A61F590A590F060044FBD8F5D0492C29E473EAD681125507C7289CFF19E3E91C0B32FC186F48FFAAFCF121B76A6EB170A03983813DF48816D61F29F2B9AF35D95EBE93F42B255BCF9B596A872397C95147974B0ED87C2F38156BA712C6F03ECE9975341759EB9B7E382238F8C942D1016E57747815E690BC38CC1E121C30263D0D55C038B638EC72E39A694B80827A152EAC26B5772949164B7CA35D2622712A2B2EF31BFDD5E2A7094A21C82EED97B6FDD0D856DE056FCB3459712F1F06B650023CEA11EBD7E4DDA562435B9383742E00DE111A929CAA676156F7F7463EE4B550BAFAA5374C162B80EFAE98FB7B18615DBF54D2AE47F31B15E716DB035A495A1458F90425735D8CE85A6D09E055306DF99996AC75A5B69A7341F1980EFB0FB5C255BECBBC0052DE2276E6DC70958C53D66C91C2E644D3414EDB3348E4BBE171E23D99092025529AF55E0DDD8FC9B3BF82BF2AB8C8320DB831BDDD718915B2522786E98E974FA0782D126C093C91576F8C33FEC65DF57DC1EB1FAF007645BF711B313BB2122
2F168C22A348478931B9808DEF2A62078F823C7F0D16E87EF3529B195DFD98FE0C44F7D5B8530FFC922DFA2E7BBD929D5E9A33A65D98A1E97F65608F999F0B8C142EA033D99602C9B138812955C01B55AC33EF15D2390F5ACBD6080C645D9EAE2CFFED26F31B75231AC06DE3B6ACBCD26182294BD96A0D441D85CEF03DF390D633382B6A37DABE3AAE4A8ECF0393658BF6C48734D97D05E4C101274410F8AAD483A90F3C5A4056FEE1102A0573A27E5A2CFDE0870CF961F605E6D7BC2C2C8E6D273EC31F48C4144555D3137E8B4AFA5FAB61C7662BFA3CB0425AC27E80BA5B102036A963AA76CC148012D50E2F666C7B0A7B78C41B2AA47A61B07D26DC410D6D06EB94A9D6B100A7137C2A6E12F1EF0EEF20EE49005E74D20E969AA291532F47AED495C3A2C415731439DC2111150B69F5A580D11FB7AE5D4C255939B92A372505CC15298491F886EEE97FD7B082F44B64BEC3C622CD5EBA6E17320ECF023F775A9CAFFFBBBF7082E55E53EEC8DD9F71F6EF74ED2E4021E92C6892803AA76254D703C65ACEEA4A756F10059C6CAB08A321896D8EA5433DF37BBF1218F407965CF809AD0D8448078542ADFB600A286628961D9CFA9DB4351506EAC38B2D0626062BE51EAA9E8FCFC69837433E1FA710F1BABCE4265F4C1D7E20E979CAE1A894EA567EA6CB9C1EBFC6EF3F7C407875104AC2EF24D0E09180BE2734C15A8B283BF6C15C309F50249A0F2998518C1D7BCC60E739E0C3D2408FBD665557051711A0A6ACD75D376C50F8B7AC6B8AC894BBE965CB2C62B67E2CA8461BC6ABCA0A88450C2578AE963620C9D04E3284EEEB8F6652DD36DF07A0805A32AB43BC4DC5165CB54A929F99A745C6369B97ADD1DD4239A659D6AB627459A03C03BB2082A99BE0286B55233006D141AD3AB04499E0C97A9A9D86D6BE9A41736A7324281875BCA3FA696BA8CF30E5E636200E3A084219DC30EE1E78308DE05A0EA87750A580DDF5A9937EE9764692718CF68ACC02F628C16902411CCC6A5D68A9C0601483AD18B6D0A9C86EC6040DBF08FDA6F4AD3884FE6D22CAE23DEEB6D51229C76F023726EAE9B38C43483A8F4DF221C13189FACB18B7F991F9E21A3C5974587C8CA34BA34C76A187BDAE22B59758606688700B56C6A7F504532A0F02AFA2AA0B8EF18F05645C762FB61568B20F5161FF1C708158B809FF272913C85C6E44A0B489D82185062AF480AADE3DDCBE66FE06A9C06F0A06F8284D4C2A0DEF5F64615A98AE8847334D243003DBC1F9E2A2DACC35CD6C04EFB01584F2580515533C9456615A9418CE96244EB495F6F94B9C3D849156E5DCE4C6FB8BD850D428A4D24CAE1F2C5171281098BB367AC0196B5530C6EBF0233C21442201C05EBBE97BB79A132DE2FDF1657F75E1AA97AF9D72E8C9245202F933197149F20C8478E92F63FFDB4C038EC3468B
604F6CBB6806300CA38B2633AEE21F38D9254609F83CD275CC9A071E43663C9196D05D9B41FCBBDAC2ED389F99CA7AB606C077B9A11FD6B74E897125D2AB8B9963E6EBF5140D57297AE8F48CB6EC2B79F189A03C00DBBEACD7B7FB903BC857BC4EC653230C8256CB8226D7A94E2B3AFD7F88B4D7FC21381216C93A95FA39C9AB335A14AC9FEB68988FE943B260AB41583EC537AB721B2854C0CEB268A6E8C5C3B369CE6468607987461014A5704A72CFEAF518624E63FA9782A6B43C32DF1F165A27A0EDFB642A7B2E8CA1418D4758FF560E7882DCDD6586A637A1445BC67134D50328BCD833D53B43A61591FF7E41AF03D3B639957BC6A824C2B16AF8D43ED362EEE6237612E93450EDB64DC0DB48E170F9C4F781C609C838EE37ADC9970984FBC636A121751B365CB4D4BB7DD0A369FF9C2E435D28F031E9AD4B020432BB9B656AB4D1B01935A173FBB7D26C3A800AC4AC4C9EBE39D912F0FEC605BDE40802F5DE734C39E1C00A64B8F402E7C99B0BA8DBBBBEA108D0C7D1C1239FF6BA94053158570A040BE2BCACBDAF736008DE079AA31F8E7DEB3B1CBC186F82A95C1996C902C24E7902DCED70AAF98FA8F8945C203A6D690B99AFE81E428E31C3B2F176BD188D97D72A1A9EEBD828934254E375C7CEE93243C8E2F2462D5A89AB2E9431CC999F635EB5B968EA2167F6BCB623FF51037F8DFDDCE3AAAC5CBB66BBBE395AE36B2BA92B04EE59FB0A8266301892E2B9D73592FACF190F1EE91FEB69C4ACF5A257553D0ED858A3F0F693342681B4AE9591247AD874DD1AE8F1
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/Copperplate-Bold cguidfix
/F1.1/Copperplate-Bold renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
1.4853215 w
1 J
1 j
0.60000002 i
/Cs1 SC
0 0 0 sc
q
0 0 m
97.165825 0 l
97.165825 89.757973 l
0 89.757973 l
h
0 0 m
W
0 0 97.165825 89.757973 rc
1 0 0 -1 -514.08002 274.14227 cm
589.42285 207.9481 m
586.34052 204.35284 582.45984 201.34166 577.88837 199.20998 c
560.72406 191.20605 540.32123 198.63208 532.31738 215.79646 c
530.18567 220.36789 529.1485 225.16904 529.09827 229.90446 c
h
589.42285 207.9481 m
S
0 i
1 0.73620707 0.11069661 sc
CM
72.315353 65.517921 m
69.647675 68.351669 66.407921 70.736565 62.665627 72.481613 c
46.854755 79.854393 28.060776 73.013947 20.688078 57.203037 c
18.943008 53.460751 17.994202 49.551338 17.772135 45.665813 c
h
72.315353 65.517921 m
f
0.74266076 w
0.60000002 i
0 0 0 sc
1 0 0 -1 -514.08002 274.14227 cm
586.39532 208.62434 m
583.72766 205.7906 580.48792 203.4057 576.74561 201.66066 c
560.93475 194.28787 542.14075 201.12833 534.76807 216.93924 c
533.02301 220.68152 532.07422 224.59093 531.85211 228.47646 c
h
586.39532 208.62434 m
S
0 i
1 1 1 sc
CM
59.773773 63.026711 m
58.946167 63.57251 58.068428 64.064621 57.143078 64.496117 c
46.939045 69.254364 34.809772 64.839668 30.051577 54.635616 c
29.620077 53.710266 29.264011 52.769085 28.98086 51.819004 c
h
59.773773 63.026711 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -514.08002 274.14227 cm
573.85376 211.11555 m
573.02618 210.56976 572.14844 210.07765 571.22308 209.64615 c
561.01904 204.88791 548.88977 209.3026 544.13159 219.50665 c
543.70007 220.43201 543.34399 221.37318 543.06085 222.32327 c
h
573.85376 211.11555 m
S
0 i
CM
51.14698 64.934097 m
52.151825 63.647957 l
53.685535 64.206184 l
52.772854 62.853073 l
53.777702 61.566929 l
52.208786 62.016808 l
51.296104 60.6637 l
51.239143 62.294849 l
49.670227 62.744728 l
51.203941 63.302952 l
h
51.14698 64.934097 m
f
41.783588 64.549072 m
42.788437 63.262924 l
44.322147 63.821148 l
43.409466 62.468044 l
44.41431 61.181896 l
42.845398 61.631779 l
41.932713 60.278671 l
41.875751 61.909817 l
40.306839 62.359695 l
41.840549 62.917923 l
h
41.783588 64.549072 m
f
34.363323 58.825348 m
35.368168 57.539204 l
36.901878 58.097431 l
35.989197 56.744324 l
36.994045 55.458179 l
35.425129 55.908058 l
34.512447 54.554951 l
34.455486 56.186096 l
32.886574 56.635979 l
34.420284 57.194202 l
h
34.363323 58.825348 m
f
2 w
2 J
0 j
0.60000002 i
1 0 0 -1 -514.08002 274.14227 cm
521.67285 232.60709 m
596.84827 205.24548 l
S
0.5 w
522.6308 235.239 m
597.80621 207.87738 l
S
0 i
1 0.73620707 0.11069661 sc
CM
8.5505037 38.904045 m
83.725914 66.265656 l
88.993027 51.794388 l
13.817614 24.432777 l
h
8.5505037 38.904045 m
f
0 0 0 sc
0.93969262 0.34202015 0.34202015 -0.93969262 -558.3877 67.837723 cm
/F1.1[ 12.427 0 0 -12.427 0 0]sf
526.09271 232.49306 m
(!"#$%&'\(\))[ 7.592897 8.288809 8.288809 3.790235 8.972294 10.351691 8.972294 8.288809 0.000000 ] xS
1.4853215 w
1 J
1 j
0.60000002 i
1 0 0 -1 -514.08002 274.14227 cm
596.94757 228.6221 m
596.89734 233.35754 595.86011 238.15868 593.72845 242.7301 c
585.72461 259.8945 565.32178 267.32053 548.15741 259.31659 c
543.586 257.18491 539.70532 254.17374 536.62299 250.57848 c
h
596.94757 228.6221 m
S
0 i
1 0.73620707 0.11069661 sc
CM
80.113693 44.092159 m
79.891624 40.206631 78.942818 36.297222 77.197746 32.554935 c
69.82505 16.744026 51.031071 9.9035769 35.220203 17.276356 c
31.477905 19.021406 28.238155 21.406305 25.570475 24.240051 c
h
80.113693 44.092159 m
f
0.74266076 w
0.60000002 i
0 0 0 sc
1 0 0 -1 -514.08002 274.14227 cm
594.19366 230.05011 m
593.97162 233.93564 593.02283 237.84505 591.27777 241.58734 c
583.90503 257.39825 565.11108 264.23871 549.30023 256.86591 c
545.55792 255.12086 542.31818 252.73596 539.65045 249.90222 c
h
594.19366 230.05011 m
S
0 i
1 1 1 sc
CM
68.904968 37.938965 m
68.621819 36.988884 68.265755 36.047703 67.834251 35.122353 c
63.076054 24.918299 50.946781 20.503605 40.742752 25.261854 c
39.817402 25.69335 38.939659 26.185463 38.112053 26.731262 c
h
68.904968 37.938965 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -514.08002 274.14227 cm
582.98499 236.20331 m
582.70184 237.15338 582.34576 238.09457 581.91425 239.01991 c
577.15607 249.22397 565.02679 253.63867 554.82275 248.88042 c
553.8974 248.44891 553.01965 247.9568 552.19208 247.41101 c
h
582.98499 236.20331 m
S
0 i
CM
63.522507 30.932621 m
63.465546 32.56377 l
64.999252 33.121994 l
63.43034 33.571873 l
63.373379 35.203022 l
62.460697 33.849915 l
60.891781 34.299793 l
61.896629 33.013649 l
60.983948 31.660542 l
62.517658 32.218765 l
h
63.522507 30.932621 m
f
56.102238 25.208902 m
56.045277 26.84005 l
57.578987 27.398273 l
56.010075 27.848154 l
55.953114 29.479301 l
55.040432 28.126194 l
53.471516 28.576073 l
54.476364 27.289928 l
53.563683 25.936821 l
55.097393 26.495047 l
h
56.102238 25.208902 m
f
46.73885 24.82387 m
46.681889 26.455017 l
48.215599 27.013243 l
46.646683 27.463121 l
46.589722 29.094269 l
45.67704 27.741163 l
44.108128 28.191042 l
45.112972 26.904896 l
44.200291 25.55179 l
45.734001 26.110016 l
h
46.73885 24.82387 m
f
2 w
2 J
0 j
0.60000002 i
1 0 0 -1 -514.08002 274.14227 cm
528.85553 252.3414 m
604.03094 224.9798 l
S
0.5 w
527.89764 249.70949 m
603.073 222.34789 l
S
ep
end
%%Trailer
%%EOF
